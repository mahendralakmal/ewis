/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

eval("/*!\n * Bootstrap v3.3.4 (http://getbootstrap.com)\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n\nif (typeof jQuery === 'undefined') {\n    throw new Error('Bootstrap\\'s JavaScript requires jQuery')\n}\n\n+function ($) {\n    'use strict';\n    var version = $.fn.jquery.split(' ')[0].split('.')\n    if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1)) {\n        throw new Error('Bootstrap\\'s JavaScript requires jQuery version 1.9.1 or higher')\n    }\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: transition.js v3.3.4\n * http://getbootstrap.com/javascript/#transitions\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n    'use strict';\n\n    // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)\n    // ============================================================\n\n    function transitionEnd() {\n        var el = document.createElement('bootstrap')\n\n        var transEndEventNames = {\n            WebkitTransition : 'webkitTransitionEnd',\n            MozTransition    : 'transitionend',\n            OTransition      : 'oTransitionEnd otransitionend',\n            transition       : 'transitionend'\n        }\n\n        for (var name in transEndEventNames) {\n            if (el.style[name] !== undefined) {\n                return { end: transEndEventNames[name] }\n            }\n        }\n\n        return false // explicit for ie8 (  ._.)\n    }\n\n    // http://blog.alexmaccaw.com/css-transitions\n    $.fn.emulateTransitionEnd = function (duration) {\n        var called = false\n        var $el = this\n        $(this).one('bsTransitionEnd', function () { called = true })\n        var callback = function () { if (!called) $($el).trigger($.support.transition.end) }\n        setTimeout(callback, duration)\n        return this\n    }\n\n    $(function () {\n        $.support.transition = transitionEnd()\n\n        if (!$.support.transition) return\n\n        $.event.special.bsTransitionEnd = {\n            bindType: $.support.transition.end,\n            delegateType: $.support.transition.end,\n            handle: function (e) {\n                if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)\n            }\n        }\n    })\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: alert.js v3.3.4\n * http://getbootstrap.com/javascript/#alerts\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n    'use strict';\n\n    // ALERT CLASS DEFINITION\n    // ======================\n\n    var dismiss = '[data-dismiss=\"alert\"]'\n    var Alert   = function (el) {\n        $(el).on('click', dismiss, this.close)\n    }\n\n    Alert.VERSION = '3.3.4'\n\n    Alert.TRANSITION_DURATION = 150\n\n    Alert.prototype.close = function (e) {\n        var $this    = $(this)\n        var selector = $this.attr('data-target')\n\n        if (!selector) {\n            selector = $this.attr('href')\n            selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n        }\n\n        var $parent = $(selector)\n\n        if (e) e.preventDefault()\n\n        if (!$parent.length) {\n            $parent = $this.closest('.alert')\n        }\n\n        $parent.trigger(e = $.Event('close.bs.alert'))\n\n        if (e.isDefaultPrevented()) return\n\n        $parent.removeClass('in')\n\n        function removeElement() {\n            // detach from parent, fire event then clean up data\n            $parent.detach().trigger('closed.bs.alert').remove()\n        }\n\n        $.support.transition && $parent.hasClass('fade') ?\n            $parent\n                .one('bsTransitionEnd', removeElement)\n                .emulateTransitionEnd(Alert.TRANSITION_DURATION) :\n            removeElement()\n    }\n\n\n    // ALERT PLUGIN DEFINITION\n    // =======================\n\n    function Plugin(option) {\n        return this.each(function () {\n            var $this = $(this)\n            var data  = $this.data('bs.alert')\n\n            if (!data) $this.data('bs.alert', (data = new Alert(this)))\n            if (typeof option == 'string') data[option].call($this)\n        })\n    }\n\n    var old = $.fn.alert\n\n    $.fn.alert             = Plugin\n    $.fn.alert.Constructor = Alert\n\n\n    // ALERT NO CONFLICT\n    // =================\n\n    $.fn.alert.noConflict = function () {\n        $.fn.alert = old\n        return this\n    }\n\n\n    // ALERT DATA-API\n    // ==============\n\n    $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: button.js v3.3.4\n * http://getbootstrap.com/javascript/#buttons\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n    'use strict';\n\n    // BUTTON PUBLIC CLASS DEFINITION\n    // ==============================\n\n    var Button = function (element, options) {\n        this.$element  = $(element)\n        this.options   = $.extend({}, Button.DEFAULTS, options)\n        this.isLoading = false\n    }\n\n    Button.VERSION  = '3.3.4'\n\n    Button.DEFAULTS = {\n        loadingText: 'loading...'\n    }\n\n    Button.prototype.setState = function (state) {\n        var d    = 'disabled'\n        var $el  = this.$element\n        var val  = $el.is('input') ? 'val' : 'html'\n        var data = $el.data()\n\n        state = state + 'Text'\n\n        if (data.resetText == null) $el.data('resetText', $el[val]())\n\n        // push to event loop to allow forms to submit\n        setTimeout($.proxy(function () {\n            $el[val](data[state] == null ? this.options[state] : data[state])\n\n            if (state == 'loadingText') {\n                this.isLoading = true\n                $el.addClass(d).attr(d, d)\n            } else if (this.isLoading) {\n                this.isLoading = false\n                $el.removeClass(d).removeAttr(d)\n            }\n        }, this), 0)\n    }\n\n    Button.prototype.toggle = function () {\n        var changed = true\n        var $parent = this.$element.closest('[data-toggle=\"buttons\"]')\n\n        if ($parent.length) {\n            var $input = this.$element.find('input')\n            if ($input.prop('type') == 'radio') {\n                if ($input.prop('checked') && this.$element.hasClass('active')) changed = false\n                else $parent.find('.active').removeClass('active')\n            }\n            if (changed) $input.prop('checked', !this.$element.hasClass('active')).trigger('change')\n        } else {\n            this.$element.attr('aria-pressed', !this.$element.hasClass('active'))\n        }\n\n        if (changed) this.$element.toggleClass('active')\n    }\n\n\n    // BUTTON PLUGIN DEFINITION\n    // ========================\n\n    function Plugin(option) {\n        return this.each(function () {\n            var $this   = $(this)\n            var data    = $this.data('bs.button')\n            var options = typeof option == 'object' && option\n\n            if (!data) $this.data('bs.button', (data = new Button(this, options)))\n\n            if (option == 'toggle') data.toggle()\n            else if (option) data.setState(option)\n        })\n    }\n\n    var old = $.fn.button\n\n    $.fn.button             = Plugin\n    $.fn.button.Constructor = Button\n\n\n    // BUTTON NO CONFLICT\n    // ==================\n\n    $.fn.button.noConflict = function () {\n        $.fn.button = old\n        return this\n    }\n\n\n    // BUTTON DATA-API\n    // ===============\n\n    $(document)\n        .on('click.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n            var $btn = $(e.target)\n            if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')\n            Plugin.call($btn, 'toggle')\n            e.preventDefault()\n        })\n        .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n            $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))\n        })\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: carousel.js v3.3.4\n * http://getbootstrap.com/javascript/#carousel\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n    'use strict';\n\n    // CAROUSEL CLASS DEFINITION\n    // =========================\n\n    var Carousel = function (element, options) {\n        this.$element    = $(element)\n        this.$indicators = this.$element.find('.carousel-indicators')\n        this.options     = options\n        this.paused      = null\n        this.sliding     = null\n        this.interval    = null\n        this.$active     = null\n        this.$items      = null\n\n        this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))\n\n        this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element\n            .on('mouseenter.bs.carousel', $.proxy(this.pause, this))\n            .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))\n    }\n\n    Carousel.VERSION  = '3.3.4'\n\n    Carousel.TRANSITION_DURATION = 600\n\n    Carousel.DEFAULTS = {\n        interval: 5000,\n        pause: 'hover',\n        wrap: true,\n        keyboard: true\n    }\n\n    Carousel.prototype.keydown = function (e) {\n        if (/input|textarea/i.test(e.target.tagName)) return\n        switch (e.which) {\n            case 37: this.prev(); break\n            case 39: this.next(); break\n            default: return\n        }\n\n        e.preventDefault()\n    }\n\n    Carousel.prototype.cycle = function (e) {\n        e || (this.paused = false)\n\n        this.interval && clearInterval(this.interval)\n\n        this.options.interval\n        && !this.paused\n        && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))\n\n        return this\n    }\n\n    Carousel.prototype.getItemIndex = function (item) {\n        this.$items = item.parent().children('.item')\n        return this.$items.index(item || this.$active)\n    }\n\n    Carousel.prototype.getItemForDirection = function (direction, active) {\n        var activeIndex = this.getItemIndex(active)\n        var willWrap = (direction == 'prev' && activeIndex === 0)\n            || (direction == 'next' && activeIndex == (this.$items.length - 1))\n        if (willWrap && !this.options.wrap) return active\n        var delta = direction == 'prev' ? -1 : 1\n        var itemIndex = (activeIndex + delta) % this.$items.length\n        return this.$items.eq(itemIndex)\n    }\n\n    Carousel.prototype.to = function (pos) {\n        var that        = this\n        var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))\n\n        if (pos > (this.$items.length - 1) || pos < 0) return\n\n        if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, \"slid\"\n        if (activeIndex == pos) return this.pause().cycle()\n\n        return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))\n    }\n\n    Carousel.prototype.pause = function (e) {\n        e || (this.paused = true)\n\n        if (this.$element.find('.next, .prev').length && $.support.transition) {\n            this.$element.trigger($.support.transition.end)\n            this.cycle(true)\n        }\n\n        this.interval = clearInterval(this.interval)\n\n        return this\n    }\n\n    Carousel.prototype.next = function () {\n        if (this.sliding) return\n        return this.slide('next')\n    }\n\n    Carousel.prototype.prev = function () {\n        if (this.sliding) return\n        return this.slide('prev')\n    }\n\n    Carousel.prototype.slide = function (type, next) {\n        var $active   = this.$element.find('.item.active')\n        var $next     = next || this.getItemForDirection(type, $active)\n        var isCycling = this.interval\n        var direction = type == 'next' ? 'left' : 'right'\n        var that      = this\n\n        if ($next.hasClass('active')) return (this.sliding = false)\n\n        var relatedTarget = $next[0]\n        var slideEvent = $.Event('slide.bs.carousel', {\n            relatedTarget: relatedTarget,\n            direction: direction\n        })\n        this.$element.trigger(slideEvent)\n        if (slideEvent.isDefaultPrevented()) return\n\n        this.sliding = true\n\n        isCycling && this.pause()\n\n        if (this.$indicators.length) {\n            this.$indicators.find('.active').removeClass('active')\n            var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])\n            $nextIndicator && $nextIndicator.addClass('active')\n        }\n\n        var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, \"slid\"\n        if ($.support.transition && this.$element.hasClass('slide')) {\n            $next.addClass(type)\n            $next[0].offsetWidth // force reflow\n            $active.addClass(direction)\n            $next.addClass(direction)\n            $active\n                .one('bsTransitionEnd', function () {\n                    $next.removeClass([type, direction].join(' ')).addClass('active')\n                    $active.removeClass(['active', direction].join(' '))\n                    that.sliding = false\n                    setTimeout(function () {\n                        that.$element.trigger(slidEvent)\n                    }, 0)\n                })\n                .emulateTransitionEnd(Carousel.TRANSITION_DURATION)\n        } else {\n            $active.removeClass('active')\n            $next.addClass('active')\n            this.sliding = false\n            this.$element.trigger(slidEvent)\n        }\n\n        isCycling && this.cycle()\n\n        return this\n    }\n\n\n    // CAROUSEL PLUGIN DEFINITION\n    // ==========================\n\n    function Plugin(option) {\n        return this.each(function () {\n            var $this   = $(this)\n            var data    = $this.data('bs.carousel')\n            var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)\n            var action  = typeof option == 'string' ? option : options.slide\n\n            if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))\n            if (typeof option == 'number') data.to(option)\n            else if (action) data[action]()\n            else if (options.interval) data.pause().cycle()\n        })\n    }\n\n    var old = $.fn.carousel\n\n    $.fn.carousel             = Plugin\n    $.fn.carousel.Constructor = Carousel\n\n\n    // CAROUSEL NO CONFLICT\n    // ====================\n\n    $.fn.carousel.noConflict = function () {\n        $.fn.carousel = old\n        return this\n    }\n\n\n    // CAROUSEL DATA-API\n    // =================\n\n    var clickHandler = function (e) {\n        var href\n        var $this   = $(this)\n        var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')) // strip for ie7\n        if (!$target.hasClass('carousel')) return\n        var options = $.extend({}, $target.data(), $this.data())\n        var slideIndex = $this.attr('data-slide-to')\n        if (slideIndex) options.interval = false\n\n        Plugin.call($target, options)\n\n        if (slideIndex) {\n            $target.data('bs.carousel').to(slideIndex)\n        }\n\n        e.preventDefault()\n    }\n\n    $(document)\n        .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)\n        .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)\n\n    $(window).on('load', function () {\n        $('[data-ride=\"carousel\"]').each(function () {\n            var $carousel = $(this)\n            Plugin.call($carousel, $carousel.data())\n        })\n    })\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: collapse.js v3.3.4\n * http://getbootstrap.com/javascript/#collapse\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n    'use strict';\n\n    // COLLAPSE PUBLIC CLASS DEFINITION\n    // ================================\n\n    var Collapse = function (element, options) {\n        this.$element      = $(element)\n        this.options       = $.extend({}, Collapse.DEFAULTS, options)\n        this.$trigger      = $('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' +\n            '[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]')\n        this.transitioning = null\n\n        if (this.options.parent) {\n            this.$parent = this.getParent()\n        } else {\n            this.addAriaAndCollapsedClass(this.$element, this.$trigger)\n        }\n\n        if (this.options.toggle) this.toggle()\n    }\n\n    Collapse.VERSION  = '3.3.4'\n\n    Collapse.TRANSITION_DURATION = 350\n\n    Collapse.DEFAULTS = {\n        toggle: true\n    }\n\n    Collapse.prototype.dimension = function () {\n        var hasWidth = this.$element.hasClass('width')\n        return hasWidth ? 'width' : 'height'\n    }\n\n    Collapse.prototype.show = function () {\n        if (this.transitioning || this.$element.hasClass('in')) return\n\n        var activesData\n        var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')\n\n        if (actives && actives.length) {\n            activesData = actives.data('bs.collapse')\n            if (activesData && activesData.transitioning) return\n        }\n\n        var startEvent = $.Event('show.bs.collapse')\n        this.$element.trigger(startEvent)\n        if (startEvent.isDefaultPrevented()) return\n\n        if (actives && actives.length) {\n            Plugin.call(actives, 'hide')\n            activesData || actives.data('bs.collapse', null)\n        }\n\n        var dimension = this.dimension()\n\n        this.$element\n            .removeClass('collapse')\n            .addClass('collapsing')[dimension](0)\n            .attr('aria-expanded', true)\n\n        this.$trigger\n            .removeClass('collapsed')\n            .attr('aria-expanded', true)\n\n        this.transitioning = 1\n\n        var complete = function () {\n            this.$element\n                .removeClass('collapsing')\n                .addClass('collapse in')[dimension]('')\n            this.transitioning = 0\n            this.$element\n                .trigger('shown.bs.collapse')\n        }\n\n        if (!$.support.transition) return complete.call(this)\n\n        var scrollSize = $.camelCase(['scroll', dimension].join('-'))\n\n        this.$element\n            .one('bsTransitionEnd', $.proxy(complete, this))\n            .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])\n    }\n\n    Collapse.prototype.hide = function () {\n        if (this.transitioning || !this.$element.hasClass('in')) return\n\n        var startEvent = $.Event('hide.bs.collapse')\n        this.$element.trigger(startEvent)\n        if (startEvent.isDefaultPrevented()) return\n\n        var dimension = this.dimension()\n\n        this.$element[dimension](this.$element[dimension]())[0].offsetHeight\n\n        this.$element\n            .addClass('collapsing')\n            .removeClass('collapse in')\n            .attr('aria-expanded', false)\n\n        this.$trigger\n            .addClass('collapsed')\n            .attr('aria-expanded', false)\n\n        this.transitioning = 1\n\n        var complete = function () {\n            this.transitioning = 0\n            this.$element\n                .removeClass('collapsing')\n                .addClass('collapse')\n                .trigger('hidden.bs.collapse')\n        }\n\n        if (!$.support.transition) return complete.call(this)\n\n        this.$element\n            [dimension](0)\n            .one('bsTransitionEnd', $.proxy(complete, this))\n            .emulateTransitionEnd(Collapse.TRANSITION_DURATION)\n    }\n\n    Collapse.prototype.toggle = function () {\n        this[this.$element.hasClass('in') ? 'hide' : 'show']()\n    }\n\n    Collapse.prototype.getParent = function () {\n        return $(this.options.parent)\n            .find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]')\n            .each($.proxy(function (i, element) {\n                var $element = $(element)\n                this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)\n            }, this))\n            .end()\n    }\n\n    Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {\n        var isOpen = $element.hasClass('in')\n\n        $element.attr('aria-expanded', isOpen)\n        $trigger\n            .toggleClass('collapsed', !isOpen)\n            .attr('aria-expanded', isOpen)\n    }\n\n    function getTargetFromTrigger($trigger) {\n        var href\n        var target = $trigger.attr('data-target')\n            || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '') // strip for ie7\n\n        return $(target)\n    }\n\n\n    // COLLAPSE PLUGIN DEFINITION\n    // ==========================\n\n    function Plugin(option) {\n        return this.each(function () {\n            var $this   = $(this)\n            var data    = $this.data('bs.collapse')\n            var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)\n\n            if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false\n            if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))\n            if (typeof option == 'string') data[option]()\n        })\n    }\n\n    var old = $.fn.collapse\n\n    $.fn.collapse             = Plugin\n    $.fn.collapse.Constructor = Collapse\n\n\n    // COLLAPSE NO CONFLICT\n    // ====================\n\n    $.fn.collapse.noConflict = function () {\n        $.fn.collapse = old\n        return this\n    }\n\n\n    // COLLAPSE DATA-API\n    // =================\n\n    $(document).on('click.bs.collapse.data-api', '[data-toggle=\"collapse\"]', function (e) {\n        var $this   = $(this)\n\n        if (!$this.attr('data-target')) e.preventDefault()\n\n        var $target = getTargetFromTrigger($this)\n        var data    = $target.data('bs.collapse')\n        var option  = data ? 'toggle' : $this.data()\n\n        Plugin.call($target, option)\n    })\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: dropdown.js v3.3.4\n * http://getbootstrap.com/javascript/#dropdowns\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n    'use strict';\n\n    // DROPDOWN CLASS DEFINITION\n    // =========================\n\n    var backdrop = '.dropdown-backdrop'\n    var toggle   = '[data-toggle=\"dropdown\"]'\n    var Dropdown = function (element) {\n        $(element).on('click.bs.dropdown', this.toggle)\n    }\n\n    Dropdown.VERSION = '3.3.4'\n\n    Dropdown.prototype.toggle = function (e) {\n        var $this = $(this)\n\n        if ($this.is('.disabled, :disabled')) return\n\n        var $parent  = getParent($this)\n        var isActive = $parent.hasClass('open')\n\n        clearMenus()\n\n        if (!isActive) {\n            if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {\n                // if mobile we use a backdrop because click events don't delegate\n                $('<div class=\"dropdown-backdrop\"/>').insertAfter($(this)).on('click', clearMenus)\n            }\n\n            var relatedTarget = { relatedTarget: this }\n            $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))\n\n            if (e.isDefaultPrevented()) return\n\n            $this\n                .trigger('focus')\n                .attr('aria-expanded', 'true')\n\n            $parent\n                .toggleClass('open')\n                .trigger('shown.bs.dropdown', relatedTarget)\n        }\n\n        return false\n    }\n\n    Dropdown.prototype.keydown = function (e) {\n        if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return\n\n        var $this = $(this)\n\n        e.preventDefault()\n        e.stopPropagation()\n\n        if ($this.is('.disabled, :disabled')) return\n\n        var $parent  = getParent($this)\n        var isActive = $parent.hasClass('open')\n\n        if ((!isActive && e.which != 27) || (isActive && e.which == 27)) {\n            if (e.which == 27) $parent.find(toggle).trigger('focus')\n            return $this.trigger('click')\n        }\n\n        var desc = ' li:not(.disabled):visible a'\n        var $items = $parent.find('[role=\"menu\"]' + desc + ', [role=\"listbox\"]' + desc)\n\n        if (!$items.length) return\n\n        var index = $items.index(e.target)\n\n        if (e.which == 38 && index > 0)                 index--                        // up\n        if (e.which == 40 && index < $items.length - 1) index++                        // down\n        if (!~index)                                      index = 0\n\n        $items.eq(index).trigger('focus')\n    }\n\n    function clearMenus(e) {\n        if (e && e.which === 3) return\n        $(backdrop).remove()\n        $(toggle).each(function () {\n            var $this         = $(this)\n            var $parent       = getParent($this)\n            var relatedTarget = { relatedTarget: this }\n\n            if (!$parent.hasClass('open')) return\n\n            $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))\n\n            if (e.isDefaultPrevented()) return\n\n            $this.attr('aria-expanded', 'false')\n            $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)\n        })\n    }\n\n    function getParent($this) {\n        var selector = $this.attr('data-target')\n\n        if (!selector) {\n            selector = $this.attr('href')\n            selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n        }\n\n        var $parent = selector && $(selector)\n\n        return $parent && $parent.length ? $parent : $this.parent()\n    }\n\n\n    // DROPDOWN PLUGIN DEFINITION\n    // ==========================\n\n    function Plugin(option) {\n        return this.each(function () {\n            var $this = $(this)\n            var data  = $this.data('bs.dropdown')\n\n            if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))\n            if (typeof option == 'string') data[option].call($this)\n        })\n    }\n\n    var old = $.fn.dropdown\n\n    $.fn.dropdown             = Plugin\n    $.fn.dropdown.Constructor = Dropdown\n\n\n    // DROPDOWN NO CONFLICT\n    // ====================\n\n    $.fn.dropdown.noConflict = function () {\n        $.fn.dropdown = old\n        return this\n    }\n\n\n    // APPLY TO STANDARD DROPDOWN ELEMENTS\n    // ===================================\n\n    $(document)\n        .on('click.bs.dropdown.data-api', clearMenus)\n        .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })\n        .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)\n        .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)\n        .on('keydown.bs.dropdown.data-api', '[role=\"menu\"]', Dropdown.prototype.keydown)\n        .on('keydown.bs.dropdown.data-api', '[role=\"listbox\"]', Dropdown.prototype.keydown)\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: modal.js v3.3.4\n * http://getbootstrap.com/javascript/#modals\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n    'use strict';\n\n    // MODAL CLASS DEFINITION\n    // ======================\n\n    var Modal = function (element, options) {\n        this.options             = options\n        this.$body               = $(document.body)\n        this.$element            = $(element)\n        this.$dialog             = this.$element.find('.modal-dialog')\n        this.$backdrop           = null\n        this.isShown             = null\n        this.originalBodyPad     = null\n        this.scrollbarWidth      = 0\n        this.ignoreBackdropClick = false\n\n        if (this.options.remote) {\n            this.$element\n                .find('.modal-content')\n                .load(this.options.remote, $.proxy(function () {\n                    this.$element.trigger('loaded.bs.modal')\n                }, this))\n        }\n    }\n\n    Modal.VERSION  = '3.3.4'\n\n    Modal.TRANSITION_DURATION = 300\n    Modal.BACKDROP_TRANSITION_DURATION = 150\n\n    Modal.DEFAULTS = {\n        backdrop: true,\n        keyboard: true,\n        show: true\n    }\n\n    Modal.prototype.toggle = function (_relatedTarget) {\n        return this.isShown ? this.hide() : this.show(_relatedTarget)\n    }\n\n    Modal.prototype.show = function (_relatedTarget) {\n        var that = this\n        var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })\n\n        this.$element.trigger(e)\n\n        if (this.isShown || e.isDefaultPrevented()) return\n\n        this.isShown = true\n\n        this.checkScrollbar()\n        this.setScrollbar()\n        this.$body.addClass('modal-open')\n\n        this.escape()\n        this.resize()\n\n        this.$element.on('click.dismiss.bs.modal', '[data-dismiss=\"modal\"]', $.proxy(this.hide, this))\n\n        this.$dialog.on('mousedown.dismiss.bs.modal', function () {\n            that.$element.one('mouseup.dismiss.bs.modal', function (e) {\n                if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true\n            })\n        })\n\n        this.backdrop(function () {\n            var transition = $.support.transition && that.$element.hasClass('fade')\n\n            if (!that.$element.parent().length) {\n                that.$element.appendTo(that.$body) // don't move modals dom position\n            }\n\n            that.$element\n                .show()\n                .scrollTop(0)\n\n            that.adjustDialog()\n\n            if (transition) {\n                that.$element[0].offsetWidth // force reflow\n            }\n\n            that.$element\n                .addClass('in')\n                .attr('aria-hidden', false)\n\n            that.enforceFocus()\n\n            var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })\n\n            transition ?\n                that.$dialog // wait for modal to slide in\n                    .one('bsTransitionEnd', function () {\n                        that.$element.trigger('focus').trigger(e)\n                    })\n                    .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\n                that.$element.trigger('focus').trigger(e)\n        })\n    }\n\n    Modal.prototype.hide = function (e) {\n        if (e) e.preventDefault()\n\n        e = $.Event('hide.bs.modal')\n\n        this.$element.trigger(e)\n\n        if (!this.isShown || e.isDefaultPrevented()) return\n\n        this.isShown = false\n\n        this.escape()\n        this.resize()\n\n        $(document).off('focusin.bs.modal')\n\n        this.$element\n            .removeClass('in')\n            .attr('aria-hidden', true)\n            .off('click.dismiss.bs.modal')\n            .off('mouseup.dismiss.bs.modal')\n\n        this.$dialog.off('mousedown.dismiss.bs.modal')\n\n        $.support.transition && this.$element.hasClass('fade') ?\n            this.$element\n                .one('bsTransitionEnd', $.proxy(this.hideModal, this))\n                .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\n            this.hideModal()\n    }\n\n    Modal.prototype.enforceFocus = function () {\n        $(document)\n            .off('focusin.bs.modal') // guard against infinite focus loop\n            .on('focusin.bs.modal', $.proxy(function (e) {\n                if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {\n                    this.$element.trigger('focus')\n                }\n            }, this))\n    }\n\n    Modal.prototype.escape = function () {\n        if (this.isShown && this.options.keyboard) {\n            this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {\n                e.which == 27 && this.hide()\n            }, this))\n        } else if (!this.isShown) {\n            this.$element.off('keydown.dismiss.bs.modal')\n        }\n    }\n\n    Modal.prototype.resize = function () {\n        if (this.isShown) {\n            $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))\n        } else {\n            $(window).off('resize.bs.modal')\n        }\n    }\n\n    Modal.prototype.hideModal = function () {\n        var that = this\n        this.$element.hide()\n        this.backdrop(function () {\n            that.$body.removeClass('modal-open')\n            that.resetAdjustments()\n            that.resetScrollbar()\n            that.$element.trigger('hidden.bs.modal')\n        })\n    }\n\n    Modal.prototype.removeBackdrop = function () {\n        this.$backdrop && this.$backdrop.remove()\n        this.$backdrop = null\n    }\n\n    Modal.prototype.backdrop = function (callback) {\n        var that = this\n        var animate = this.$element.hasClass('fade') ? 'fade' : ''\n\n        if (this.isShown && this.options.backdrop) {\n            var doAnimate = $.support.transition && animate\n\n            this.$backdrop = $('<div class=\"modal-backdrop ' + animate + '\" />')\n                .appendTo(this.$body)\n\n            this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {\n                if (this.ignoreBackdropClick) {\n                    this.ignoreBackdropClick = false\n                    return\n                }\n                if (e.target !== e.currentTarget) return\n                this.options.backdrop == 'static'\n                    ? this.$element[0].focus()\n                    : this.hide()\n            }, this))\n\n            if (doAnimate) this.$backdrop[0].offsetWidth // force reflow\n\n            this.$backdrop.addClass('in')\n\n            if (!callback) return\n\n            doAnimate ?\n                this.$backdrop\n                    .one('bsTransitionEnd', callback)\n                    .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\n                callback()\n\n        } else if (!this.isShown && this.$backdrop) {\n            this.$backdrop.removeClass('in')\n\n            var callbackRemove = function () {\n                that.removeBackdrop()\n                callback && callback()\n            }\n            $.support.transition && this.$element.hasClass('fade') ?\n                this.$backdrop\n                    .one('bsTransitionEnd', callbackRemove)\n                    .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\n                callbackRemove()\n\n        } else if (callback) {\n            callback()\n        }\n    }\n\n    // these following methods are used to handle overflowing modals\n\n    Modal.prototype.handleUpdate = function () {\n        this.adjustDialog()\n    }\n\n    Modal.prototype.adjustDialog = function () {\n        var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight\n\n        this.$element.css({\n            paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',\n            paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''\n        })\n    }\n\n    Modal.prototype.resetAdjustments = function () {\n        this.$element.css({\n            paddingLeft: '',\n            paddingRight: ''\n        })\n    }\n\n    Modal.prototype.checkScrollbar = function () {\n        var fullWindowWidth = window.innerWidth\n        if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8\n            var documentElementRect = document.documentElement.getBoundingClientRect()\n            fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)\n        }\n        this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth\n        this.scrollbarWidth = this.measureScrollbar()\n    }\n\n    Modal.prototype.setScrollbar = function () {\n        var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)\n        this.originalBodyPad = document.body.style.paddingRight || ''\n        if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)\n    }\n\n    Modal.prototype.resetScrollbar = function () {\n        this.$body.css('padding-right', this.originalBodyPad)\n    }\n\n    Modal.prototype.measureScrollbar = function () { // thx walsh\n        var scrollDiv = document.createElement('div')\n        scrollDiv.className = 'modal-scrollbar-measure'\n        this.$body.append(scrollDiv)\n        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth\n        this.$body[0].removeChild(scrollDiv)\n        return scrollbarWidth\n    }\n\n\n    // MODAL PLUGIN DEFINITION\n    // =======================\n\n    function Plugin(option, _relatedTarget) {\n        return this.each(function () {\n            var $this   = $(this)\n            var data    = $this.data('bs.modal')\n            var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)\n\n            if (!data) $this.data('bs.modal', (data = new Modal(this, options)))\n            if (typeof option == 'string') data[option](_relatedTarget)\n            else if (options.show) data.show(_relatedTarget)\n        })\n    }\n\n    var old = $.fn.modal\n\n    $.fn.modal             = Plugin\n    $.fn.modal.Constructor = Modal\n\n\n    // MODAL NO CONFLICT\n    // =================\n\n    $.fn.modal.noConflict = function () {\n        $.fn.modal = old\n        return this\n    }\n\n\n    // MODAL DATA-API\n    // ==============\n\n    $(document).on('click.bs.modal.data-api', '[data-toggle=\"modal\"]', function (e) {\n        var $this   = $(this)\n        var href    = $this.attr('href')\n        var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\\s]+$)/, ''))) // strip for ie7\n        var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())\n\n        if ($this.is('a')) e.preventDefault()\n\n        $target.one('show.bs.modal', function (showEvent) {\n            if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown\n            $target.one('hidden.bs.modal', function () {\n                $this.is(':visible') && $this.trigger('focus')\n            })\n        })\n        Plugin.call($target, option, this)\n    })\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: tooltip.js v3.3.4\n * http://getbootstrap.com/javascript/#tooltip\n * Inspired by the original jQuery.tipsy by Jason Frame\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n    'use strict';\n\n    // TOOLTIP PUBLIC CLASS DEFINITION\n    // ===============================\n\n    var Tooltip = function (element, options) {\n        this.type       = null\n        this.options    = null\n        this.enabled    = null\n        this.timeout    = null\n        this.hoverState = null\n        this.$element   = null\n\n        this.init('tooltip', element, options)\n    }\n\n    Tooltip.VERSION  = '3.3.4'\n\n    Tooltip.TRANSITION_DURATION = 150\n\n    Tooltip.DEFAULTS = {\n        animation: true,\n        placement: 'top',\n        selector: false,\n        template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n        trigger: 'hover focus',\n        title: '',\n        delay: 0,\n        html: false,\n        container: false,\n        viewport: {\n            selector: 'body',\n            padding: 0\n        }\n    }\n\n    Tooltip.prototype.init = function (type, element, options) {\n        var this$1 = this;\n\n        this.enabled   = true\n        this.type      = type\n        this.$element  = $(element)\n        this.options   = this.getOptions(options)\n        this.$viewport = this.options.viewport && $(this.options.viewport.selector || this.options.viewport)\n\n        if (this.$element[0] instanceof document.constructor && !this.options.selector) {\n            throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')\n        }\n\n        var triggers = this.options.trigger.split(' ')\n\n        for (var i = triggers.length; i--;) {\n            var trigger = triggers[i]\n\n            if (trigger == 'click') {\n                this$1.$element.on('click.' + this$1.type, this$1.options.selector, $.proxy(this$1.toggle, this$1))\n            } else if (trigger != 'manual') {\n                var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'\n                var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'\n\n                this$1.$element.on(eventIn  + '.' + this$1.type, this$1.options.selector, $.proxy(this$1.enter, this$1))\n                this$1.$element.on(eventOut + '.' + this$1.type, this$1.options.selector, $.proxy(this$1.leave, this$1))\n            }\n        }\n\n        this.options.selector ?\n            (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :\n            this.fixTitle()\n    }\n\n    Tooltip.prototype.getDefaults = function () {\n        return Tooltip.DEFAULTS\n    }\n\n    Tooltip.prototype.getOptions = function (options) {\n        options = $.extend({}, this.getDefaults(), this.$element.data(), options)\n\n        if (options.delay && typeof options.delay == 'number') {\n            options.delay = {\n                show: options.delay,\n                hide: options.delay\n            }\n        }\n\n        return options\n    }\n\n    Tooltip.prototype.getDelegateOptions = function () {\n        var options  = {}\n        var defaults = this.getDefaults()\n\n        this._options && $.each(this._options, function (key, value) {\n            if (defaults[key] != value) options[key] = value\n        })\n\n        return options\n    }\n\n    Tooltip.prototype.enter = function (obj) {\n        var self = obj instanceof this.constructor ?\n            obj : $(obj.currentTarget).data('bs.' + this.type)\n\n        if (self && self.$tip && self.$tip.is(':visible')) {\n            self.hoverState = 'in'\n            return\n        }\n\n        if (!self) {\n            self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n            $(obj.currentTarget).data('bs.' + this.type, self)\n        }\n\n        clearTimeout(self.timeout)\n\n        self.hoverState = 'in'\n\n        if (!self.options.delay || !self.options.delay.show) return self.show()\n\n        self.timeout = setTimeout(function () {\n            if (self.hoverState == 'in') self.show()\n        }, self.options.delay.show)\n    }\n\n    Tooltip.prototype.leave = function (obj) {\n        var self = obj instanceof this.constructor ?\n            obj : $(obj.currentTarget).data('bs.' + this.type)\n\n        if (!self) {\n            self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n            $(obj.currentTarget).data('bs.' + this.type, self)\n        }\n\n        clearTimeout(self.timeout)\n\n        self.hoverState = 'out'\n\n        if (!self.options.delay || !self.options.delay.hide) return self.hide()\n\n        self.timeout = setTimeout(function () {\n            if (self.hoverState == 'out') self.hide()\n        }, self.options.delay.hide)\n    }\n\n    Tooltip.prototype.show = function () {\n        var e = $.Event('show.bs.' + this.type)\n\n        if (this.hasContent() && this.enabled) {\n            this.$element.trigger(e)\n\n            var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])\n            if (e.isDefaultPrevented() || !inDom) return\n            var that = this\n\n            var $tip = this.tip()\n\n            var tipId = this.getUID(this.type)\n\n            this.setContent()\n            $tip.attr('id', tipId)\n            this.$element.attr('aria-describedby', tipId)\n\n            if (this.options.animation) $tip.addClass('fade')\n\n            var placement = typeof this.options.placement == 'function' ?\n                this.options.placement.call(this, $tip[0], this.$element[0]) :\n                this.options.placement\n\n            var autoToken = /\\s?auto?\\s?/i\n            var autoPlace = autoToken.test(placement)\n            if (autoPlace) placement = placement.replace(autoToken, '') || 'top'\n\n            $tip\n                .detach()\n                .css({ top: 0, left: 0, display: 'block' })\n                .addClass(placement)\n                .data('bs.' + this.type, this)\n\n            this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)\n\n            var pos          = this.getPosition()\n            var actualWidth  = $tip[0].offsetWidth\n            var actualHeight = $tip[0].offsetHeight\n\n            if (autoPlace) {\n                var orgPlacement = placement\n                var $container   = this.options.container ? $(this.options.container) : this.$element.parent()\n                var containerDim = this.getPosition($container)\n\n                placement = placement == 'bottom' && pos.bottom + actualHeight > containerDim.bottom ? 'top'    :\n                    placement == 'top'    && pos.top    - actualHeight < containerDim.top    ? 'bottom' :\n                        placement == 'right'  && pos.right  + actualWidth  > containerDim.width  ? 'left'   :\n                            placement == 'left'   && pos.left   - actualWidth  < containerDim.left   ? 'right'  :\n                                placement\n\n                $tip\n                    .removeClass(orgPlacement)\n                    .addClass(placement)\n            }\n\n            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)\n\n            this.applyPlacement(calculatedOffset, placement)\n\n            var complete = function () {\n                var prevHoverState = that.hoverState\n                that.$element.trigger('shown.bs.' + that.type)\n                that.hoverState = null\n\n                if (prevHoverState == 'out') that.leave(that)\n            }\n\n            $.support.transition && this.$tip.hasClass('fade') ?\n                $tip\n                    .one('bsTransitionEnd', complete)\n                    .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\n                complete()\n        }\n    }\n\n    Tooltip.prototype.applyPlacement = function (offset, placement) {\n        var $tip   = this.tip()\n        var width  = $tip[0].offsetWidth\n        var height = $tip[0].offsetHeight\n\n        // manually read margins because getBoundingClientRect includes difference\n        var marginTop = parseInt($tip.css('margin-top'), 10)\n        var marginLeft = parseInt($tip.css('margin-left'), 10)\n\n        // we must check for NaN for ie 8/9\n        if (isNaN(marginTop))  marginTop  = 0\n        if (isNaN(marginLeft)) marginLeft = 0\n\n        offset.top  = offset.top  + marginTop\n        offset.left = offset.left + marginLeft\n\n        // $.fn.offset doesn't round pixel values\n        // so we use setOffset directly with our own function B-0\n        $.offset.setOffset($tip[0], $.extend({\n            using: function (props) {\n                $tip.css({\n                    top: Math.round(props.top),\n                    left: Math.round(props.left)\n                })\n            }\n        }, offset), 0)\n\n        $tip.addClass('in')\n\n        // check to see if placing tip in new offset caused the tip to resize itself\n        var actualWidth  = $tip[0].offsetWidth\n        var actualHeight = $tip[0].offsetHeight\n\n        if (placement == 'top' && actualHeight != height) {\n            offset.top = offset.top + height - actualHeight\n        }\n\n        var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)\n\n        if (delta.left) offset.left += delta.left\n        else offset.top += delta.top\n\n        var isVertical          = /top|bottom/.test(placement)\n        var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight\n        var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'\n\n        $tip.offset(offset)\n        this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)\n    }\n\n    Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {\n        this.arrow()\n            .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n            .css(isVertical ? 'top' : 'left', '')\n    }\n\n    Tooltip.prototype.setContent = function () {\n        var $tip  = this.tip()\n        var title = this.getTitle()\n\n        $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)\n        $tip.removeClass('fade in top bottom left right')\n    }\n\n    Tooltip.prototype.hide = function (callback) {\n        var that = this\n        var $tip = $(this.$tip)\n        var e    = $.Event('hide.bs.' + this.type)\n\n        function complete() {\n            if (that.hoverState != 'in') $tip.detach()\n            that.$element\n                .removeAttr('aria-describedby')\n                .trigger('hidden.bs.' + that.type)\n            callback && callback()\n        }\n\n        this.$element.trigger(e)\n\n        if (e.isDefaultPrevented()) return\n\n        $tip.removeClass('in')\n\n        $.support.transition && $tip.hasClass('fade') ?\n            $tip\n                .one('bsTransitionEnd', complete)\n                .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\n            complete()\n\n        this.hoverState = null\n\n        return this\n    }\n\n    Tooltip.prototype.fixTitle = function () {\n        var $e = this.$element\n        if ($e.attr('title') || typeof ($e.attr('data-original-title')) != 'string') {\n            $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')\n        }\n    }\n\n    Tooltip.prototype.hasContent = function () {\n        return this.getTitle()\n    }\n\n    Tooltip.prototype.getPosition = function ($element) {\n        $element   = $element || this.$element\n\n        var el     = $element[0]\n        var isBody = el.tagName == 'BODY'\n\n        var elRect    = el.getBoundingClientRect()\n        if (elRect.width == null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })\n        }\n        var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()\n        var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }\n        var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null\n\n        return $.extend({}, elRect, scroll, outerDims, elOffset)\n    }\n\n    Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {\n        return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :\n            placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :\n                placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :\n                    /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }\n\n    }\n\n    Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {\n        var delta = { top: 0, left: 0 }\n        if (!this.$viewport) return delta\n\n        var viewportPadding = this.options.viewport && this.options.viewport.padding || 0\n        var viewportDimensions = this.getPosition(this.$viewport)\n\n        if (/right|left/.test(placement)) {\n            var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll\n            var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n                delta.top = viewportDimensions.top - topEdgeOffset\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n                delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset\n            }\n        } else {\n            var leftEdgeOffset  = pos.left - viewportPadding\n            var rightEdgeOffset = pos.left + viewportPadding + actualWidth\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n                delta.left = viewportDimensions.left - leftEdgeOffset\n            } else if (rightEdgeOffset > viewportDimensions.width) { // right overflow\n                delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset\n            }\n        }\n\n        return delta\n    }\n\n    Tooltip.prototype.getTitle = function () {\n        var title\n        var $e = this.$element\n        var o  = this.options\n\n        title = $e.attr('data-original-title')\n            || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)\n\n        return title\n    }\n\n    Tooltip.prototype.getUID = function (prefix) {\n        do prefix += ~~(Math.random() * 1000000)\n        while (document.getElementById(prefix))\n        return prefix\n    }\n\n    Tooltip.prototype.tip = function () {\n        return (this.$tip = this.$tip || $(this.options.template))\n    }\n\n    Tooltip.prototype.arrow = function () {\n        return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))\n    }\n\n    Tooltip.prototype.enable = function () {\n        this.enabled = true\n    }\n\n    Tooltip.prototype.disable = function () {\n        this.enabled = false\n    }\n\n    Tooltip.prototype.toggleEnabled = function () {\n        this.enabled = !this.enabled\n    }\n\n    Tooltip.prototype.toggle = function (e) {\n        var self = this\n        if (e) {\n            self = $(e.currentTarget).data('bs.' + this.type)\n            if (!self) {\n                self = new this.constructor(e.currentTarget, this.getDelegateOptions())\n                $(e.currentTarget).data('bs.' + this.type, self)\n            }\n        }\n\n        self.tip().hasClass('in') ? self.leave(self) : self.enter(self)\n    }\n\n    Tooltip.prototype.destroy = function () {\n        var that = this\n        clearTimeout(this.timeout)\n        this.hide(function () {\n            that.$element.off('.' + that.type).removeData('bs.' + that.type)\n        })\n    }\n\n\n    // TOOLTIP PLUGIN DEFINITION\n    // =========================\n\n    function Plugin(option) {\n        return this.each(function () {\n            var $this   = $(this)\n            var data    = $this.data('bs.tooltip')\n            var options = typeof option == 'object' && option\n\n            if (!data && /destroy|hide/.test(option)) return\n            if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))\n            if (typeof option == 'string') data[option]()\n        })\n    }\n\n    var old = $.fn.tooltip\n\n    $.fn.tooltip             = Plugin\n    $.fn.tooltip.Constructor = Tooltip\n\n\n    // TOOLTIP NO CONFLICT\n    // ===================\n\n    $.fn.tooltip.noConflict = function () {\n        $.fn.tooltip = old\n        return this\n    }\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: popover.js v3.3.4\n * http://getbootstrap.com/javascript/#popovers\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n    'use strict';\n\n    // POPOVER PUBLIC CLASS DEFINITION\n    // ===============================\n\n    var Popover = function (element, options) {\n        this.init('popover', element, options)\n    }\n\n    if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')\n\n    Popover.VERSION  = '3.3.4'\n\n    Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {\n        placement: 'right',\n        trigger: 'click',\n        content: '',\n        template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'\n    })\n\n\n    // NOTE: POPOVER EXTENDS tooltip.js\n    // ================================\n\n    Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)\n\n    Popover.prototype.constructor = Popover\n\n    Popover.prototype.getDefaults = function () {\n        return Popover.DEFAULTS\n    }\n\n    Popover.prototype.setContent = function () {\n        var $tip    = this.tip()\n        var title   = this.getTitle()\n        var content = this.getContent()\n\n        $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)\n        $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events\n            this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'\n            ](content)\n\n        $tip.removeClass('fade top bottom left right in')\n\n        // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\n        // this manually by checking the contents.\n        if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()\n    }\n\n    Popover.prototype.hasContent = function () {\n        return this.getTitle() || this.getContent()\n    }\n\n    Popover.prototype.getContent = function () {\n        var $e = this.$element\n        var o  = this.options\n\n        return $e.attr('data-content')\n            || (typeof o.content == 'function' ?\n                o.content.call($e[0]) :\n                o.content)\n    }\n\n    Popover.prototype.arrow = function () {\n        return (this.$arrow = this.$arrow || this.tip().find('.arrow'))\n    }\n\n\n    // POPOVER PLUGIN DEFINITION\n    // =========================\n\n    function Plugin(option) {\n        return this.each(function () {\n            var $this   = $(this)\n            var data    = $this.data('bs.popover')\n            var options = typeof option == 'object' && option\n\n            if (!data && /destroy|hide/.test(option)) return\n            if (!data) $this.data('bs.popover', (data = new Popover(this, options)))\n            if (typeof option == 'string') data[option]()\n        })\n    }\n\n    var old = $.fn.popover\n\n    $.fn.popover             = Plugin\n    $.fn.popover.Constructor = Popover\n\n\n    // POPOVER NO CONFLICT\n    // ===================\n\n    $.fn.popover.noConflict = function () {\n        $.fn.popover = old\n        return this\n    }\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: scrollspy.js v3.3.4\n * http://getbootstrap.com/javascript/#scrollspy\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n    'use strict';\n\n    // SCROLLSPY CLASS DEFINITION\n    // ==========================\n\n    function ScrollSpy(element, options) {\n        this.$body          = $(document.body)\n        this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)\n        this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)\n        this.selector       = (this.options.target || '') + ' .nav li > a'\n        this.offsets        = []\n        this.targets        = []\n        this.activeTarget   = null\n        this.scrollHeight   = 0\n\n        this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))\n        this.refresh()\n        this.process()\n    }\n\n    ScrollSpy.VERSION  = '3.3.4'\n\n    ScrollSpy.DEFAULTS = {\n        offset: 10\n    }\n\n    ScrollSpy.prototype.getScrollHeight = function () {\n        return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\n    }\n\n    ScrollSpy.prototype.refresh = function () {\n        var that          = this\n        var offsetMethod  = 'offset'\n        var offsetBase    = 0\n\n        this.offsets      = []\n        this.targets      = []\n        this.scrollHeight = this.getScrollHeight()\n\n        if (!$.isWindow(this.$scrollElement[0])) {\n            offsetMethod = 'position'\n            offsetBase   = this.$scrollElement.scrollTop()\n        }\n\n        this.$body\n            .find(this.selector)\n            .map(function () {\n                var $el   = $(this)\n                var href  = $el.data('target') || $el.attr('href')\n                var $href = /^#./.test(href) && $(href)\n\n                return ($href\n                    && $href.length\n                    && $href.is(':visible')\n                    && [[$href[offsetMethod]().top + offsetBase, href]]) || null\n            })\n            .sort(function (a, b) { return a[0] - b[0] })\n            .each(function () {\n                that.offsets.push(this[0])\n                that.targets.push(this[1])\n            })\n    }\n\n    ScrollSpy.prototype.process = function () {\n        var this$1 = this;\n\n        var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\n        var scrollHeight = this.getScrollHeight()\n        var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()\n        var offsets      = this.offsets\n        var targets      = this.targets\n        var activeTarget = this.activeTarget\n        var i\n\n        if (this.scrollHeight != scrollHeight) {\n            this.refresh()\n        }\n\n        if (scrollTop >= maxScroll) {\n            return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)\n        }\n\n        if (activeTarget && scrollTop < offsets[0]) {\n            this.activeTarget = null\n            return this.clear()\n        }\n\n        for (i = offsets.length; i--;) {\n            activeTarget != targets[i]\n            && scrollTop >= offsets[i]\n            && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])\n            && this$1.activate(targets[i])\n        }\n    }\n\n    ScrollSpy.prototype.activate = function (target) {\n        this.activeTarget = target\n\n        this.clear()\n\n        var selector = this.selector +\n            '[data-target=\"' + target + '\"],' +\n            this.selector + '[href=\"' + target + '\"]'\n\n        var active = $(selector)\n            .parents('li')\n            .addClass('active')\n\n        if (active.parent('.dropdown-menu').length) {\n            active = active\n                .closest('li.dropdown')\n                .addClass('active')\n        }\n\n        active.trigger('activate.bs.scrollspy')\n    }\n\n    ScrollSpy.prototype.clear = function () {\n        $(this.selector)\n            .parentsUntil(this.options.target, '.active')\n            .removeClass('active')\n    }\n\n\n    // SCROLLSPY PLUGIN DEFINITION\n    // ===========================\n\n    function Plugin(option) {\n        return this.each(function () {\n            var $this   = $(this)\n            var data    = $this.data('bs.scrollspy')\n            var options = typeof option == 'object' && option\n\n            if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))\n            if (typeof option == 'string') data[option]()\n        })\n    }\n\n    var old = $.fn.scrollspy\n\n    $.fn.scrollspy             = Plugin\n    $.fn.scrollspy.Constructor = ScrollSpy\n\n\n    // SCROLLSPY NO CONFLICT\n    // =====================\n\n    $.fn.scrollspy.noConflict = function () {\n        $.fn.scrollspy = old\n        return this\n    }\n\n\n    // SCROLLSPY DATA-API\n    // ==================\n\n    $(window).on('load.bs.scrollspy.data-api', function () {\n        $('[data-spy=\"scroll\"]').each(function () {\n            var $spy = $(this)\n            Plugin.call($spy, $spy.data())\n        })\n    })\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: tab.js v3.3.4\n * http://getbootstrap.com/javascript/#tabs\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n    'use strict';\n\n    // TAB CLASS DEFINITION\n    // ====================\n\n    var Tab = function (element) {\n        this.element = $(element)\n    }\n\n    Tab.VERSION = '3.3.4'\n\n    Tab.TRANSITION_DURATION = 150\n\n    Tab.prototype.show = function () {\n        var $this    = this.element\n        var $ul      = $this.closest('ul:not(.dropdown-menu)')\n        var selector = $this.data('target')\n\n        if (!selector) {\n            selector = $this.attr('href')\n            selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n        }\n\n        if ($this.parent('li').hasClass('active')) return\n\n        var $previous = $ul.find('.active:last a')\n        var hideEvent = $.Event('hide.bs.tab', {\n            relatedTarget: $this[0]\n        })\n        var showEvent = $.Event('show.bs.tab', {\n            relatedTarget: $previous[0]\n        })\n\n        $previous.trigger(hideEvent)\n        $this.trigger(showEvent)\n\n        if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return\n\n        var $target = $(selector)\n\n        this.activate($this.closest('li'), $ul)\n        this.activate($target, $target.parent(), function () {\n            $previous.trigger({\n                type: 'hidden.bs.tab',\n                relatedTarget: $this[0]\n            })\n            $this.trigger({\n                type: 'shown.bs.tab',\n                relatedTarget: $previous[0]\n            })\n        })\n    }\n\n    Tab.prototype.activate = function (element, container, callback) {\n        var $active    = container.find('> .active')\n        var transition = callback\n            && $.support.transition\n            && (($active.length && $active.hasClass('fade')) || !!container.find('> .fade').length)\n\n        function next() {\n            $active\n                .removeClass('active')\n                .find('> .dropdown-menu > .active')\n                .removeClass('active')\n                .end()\n                .find('[data-toggle=\"tab\"]')\n                .attr('aria-expanded', false)\n\n            element\n                .addClass('active')\n                .find('[data-toggle=\"tab\"]')\n                .attr('aria-expanded', true)\n\n            if (transition) {\n                element[0].offsetWidth // reflow for transition\n                element.addClass('in')\n            } else {\n                element.removeClass('fade')\n            }\n\n            if (element.parent('.dropdown-menu').length) {\n                element\n                    .closest('li.dropdown')\n                    .addClass('active')\n                    .end()\n                    .find('[data-toggle=\"tab\"]')\n                    .attr('aria-expanded', true)\n            }\n\n            callback && callback()\n        }\n\n        $active.length && transition ?\n            $active\n                .one('bsTransitionEnd', next)\n                .emulateTransitionEnd(Tab.TRANSITION_DURATION) :\n            next()\n\n        $active.removeClass('in')\n    }\n\n\n    // TAB PLUGIN DEFINITION\n    // =====================\n\n    function Plugin(option) {\n        return this.each(function () {\n            var $this = $(this)\n            var data  = $this.data('bs.tab')\n\n            if (!data) $this.data('bs.tab', (data = new Tab(this)))\n            if (typeof option == 'string') data[option]()\n        })\n    }\n\n    var old = $.fn.tab\n\n    $.fn.tab             = Plugin\n    $.fn.tab.Constructor = Tab\n\n\n    // TAB NO CONFLICT\n    // ===============\n\n    $.fn.tab.noConflict = function () {\n        $.fn.tab = old\n        return this\n    }\n\n\n    // TAB DATA-API\n    // ============\n\n    var clickHandler = function (e) {\n        e.preventDefault()\n        Plugin.call($(this), 'show')\n    }\n\n    $(document)\n        .on('click.bs.tab.data-api', '[data-toggle=\"tab\"]', clickHandler)\n        .on('click.bs.tab.data-api', '[data-toggle=\"pill\"]', clickHandler)\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: affix.js v3.3.4\n * http://getbootstrap.com/javascript/#affix\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n    'use strict';\n\n    // AFFIX CLASS DEFINITION\n    // ======================\n\n    var Affix = function (element, options) {\n        this.options = $.extend({}, Affix.DEFAULTS, options)\n\n        this.$target = $(this.options.target)\n            .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))\n            .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))\n\n        this.$element     = $(element)\n        this.affixed      = null\n        this.unpin        = null\n        this.pinnedOffset = null\n\n        this.checkPosition()\n    }\n\n    Affix.VERSION  = '3.3.4'\n\n    Affix.RESET    = 'affix affix-top affix-bottom'\n\n    Affix.DEFAULTS = {\n        offset: 0,\n        target: window\n    }\n\n    Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {\n        var scrollTop    = this.$target.scrollTop()\n        var position     = this.$element.offset()\n        var targetHeight = this.$target.height()\n\n        if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false\n\n        if (this.affixed == 'bottom') {\n            if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'\n            return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'\n        }\n\n        var initializing   = this.affixed == null\n        var colliderTop    = initializing ? scrollTop : position.top\n        var colliderHeight = initializing ? targetHeight : height\n\n        if (offsetTop != null && scrollTop <= offsetTop) return 'top'\n        if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'\n\n        return false\n    }\n\n    Affix.prototype.getPinnedOffset = function () {\n        if (this.pinnedOffset) return this.pinnedOffset\n        this.$element.removeClass(Affix.RESET).addClass('affix')\n        var scrollTop = this.$target.scrollTop()\n        var position  = this.$element.offset()\n        return (this.pinnedOffset = position.top - scrollTop)\n    }\n\n    Affix.prototype.checkPositionWithEventLoop = function () {\n        setTimeout($.proxy(this.checkPosition, this), 1)\n    }\n\n    Affix.prototype.checkPosition = function () {\n        if (!this.$element.is(':visible')) return\n\n        var height       = this.$element.height()\n        var offset       = this.options.offset\n        var offsetTop    = offset.top\n        var offsetBottom = offset.bottom\n        var scrollHeight = $(document.body).height()\n\n        if (typeof offset != 'object')         offsetBottom = offsetTop = offset\n        if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)\n        if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)\n\n        var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)\n\n        if (this.affixed != affix) {\n            if (this.unpin != null) this.$element.css('top', '')\n\n            var affixType = 'affix' + (affix ? '-' + affix : '')\n            var e         = $.Event(affixType + '.bs.affix')\n\n            this.$element.trigger(e)\n\n            if (e.isDefaultPrevented()) return\n\n            this.affixed = affix\n            this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null\n\n            this.$element\n                .removeClass(Affix.RESET)\n                .addClass(affixType)\n                .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')\n        }\n\n        if (affix == 'bottom') {\n            this.$element.offset({\n                top: scrollHeight - height - offsetBottom\n            })\n        }\n    }\n\n\n    // AFFIX PLUGIN DEFINITION\n    // =======================\n\n    function Plugin(option) {\n        return this.each(function () {\n            var $this   = $(this)\n            var data    = $this.data('bs.affix')\n            var options = typeof option == 'object' && option\n\n            if (!data) $this.data('bs.affix', (data = new Affix(this, options)))\n            if (typeof option == 'string') data[option]()\n        })\n    }\n\n    var old = $.fn.affix\n\n    $.fn.affix             = Plugin\n    $.fn.affix.Constructor = Affix\n\n\n    // AFFIX NO CONFLICT\n    // =================\n\n    $.fn.affix.noConflict = function () {\n        $.fn.affix = old\n        return this\n    }\n\n\n    // AFFIX DATA-API\n    // ==============\n\n    $(window).on('load', function () {\n        $('[data-spy=\"affix\"]').each(function () {\n            var $spy = $(this)\n            var data = $spy.data()\n\n            data.offset = data.offset || {}\n\n            if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom\n            if (data.offsetTop    != null) data.offset.top    = data.offsetTop\n\n            Plugin.call($spy, data)\n        })\n    })\n\n}(jQuery);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

eval("var Component = __webpack_require__(3)(\n  /* script */\n  __webpack_require__(2),\n  /* template */\n  __webpack_require__(4),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"/home/vagrant/projects/EWIS_Home/ewis/resources/assets/js/components/Example.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] Example.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-3a6f2fea\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-3a6f2fea\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9FeGFtcGxlLnZ1ZT9kZDRlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYnVibGUtbG9hZGVyP3tcXFwib2JqZWN0QXNzaWduXFxcIjpcXFwiT2JqZWN0LmFzc2lnblxcXCJ9IS4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9FeGFtcGxlLnZ1ZVwiKSxcbiAgLyogdGVtcGxhdGUgKi9cbiAgcmVxdWlyZShcIiEhLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/aWQ9ZGF0YS12LTNhNmYyZmVhIS4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0V4YW1wbGUudnVlXCIpLFxuICAvKiBzY29wZUlkICovXG4gIG51bGwsXG4gIC8qIGNzc01vZHVsZXMgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvaG9tZS92YWdyYW50L3Byb2plY3RzL0VXSVNfSG9tZS9ld2lzL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9FeGFtcGxlLnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIn0pKSB7Y29uc29sZS5lcnJvcihcIm5hbWVkIGV4cG9ydHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gKi52dWUgZmlsZXMuXCIpfVxuaWYgKENvbXBvbmVudC5vcHRpb25zLmZ1bmN0aW9uYWwpIHtjb25zb2xlLmVycm9yKFwiW3Z1ZS1sb2FkZXJdIEV4YW1wbGUudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTNhNmYyZmVhXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtM2E2ZjJmZWFcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbn0pKCl9XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL0V4YW1wbGUudnVlXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ exports[\"default\"] = {\n    mounted: function mounted() {\n        console.log('Component mounted.')\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvRXhhbXBsZS52dWU/YmRhNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbW91bnRlZCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0NvbXBvbmVudCBtb3VudGVkLicpXG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHJlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9FeGFtcGxlLnZ1ZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 3 */
/***/ function(module, exports) {

eval("module.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  scopeId,\n  cssModules\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  // inject cssModules\n  if (cssModules) {\n    var computed = options.computed || (options.computed = {})\n    Object.keys(cssModules).forEach(function (key) {\n      var module = cssModules[key]\n      computed[key] = function () { return module }\n    })\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXIuanM/ZDRmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHJhd1NjcmlwdEV4cG9ydHMsXG4gIGNvbXBpbGVkVGVtcGxhdGUsXG4gIHNjb3BlSWQsXG4gIGNzc01vZHVsZXNcbikge1xuICB2YXIgZXNNb2R1bGVcbiAgdmFyIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyB8fCB7fVxuXG4gIC8vIEVTNiBtb2R1bGVzIGludGVyb3BcbiAgdmFyIHR5cGUgPSB0eXBlb2YgcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIGlmICh0eXBlID09PSAnb2JqZWN0JyB8fCB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXNNb2R1bGUgPSByYXdTY3JpcHRFeHBvcnRzXG4gICAgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICB9XG5cbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChjb21waWxlZFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBjb21waWxlZFRlbXBsYXRlLnJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gY29tcGlsZWRUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9IHNjb3BlSWRcbiAgfVxuXG4gIC8vIGluamVjdCBjc3NNb2R1bGVzXG4gIGlmIChjc3NNb2R1bGVzKSB7XG4gICAgdmFyIGNvbXB1dGVkID0gb3B0aW9ucy5jb21wdXRlZCB8fCAob3B0aW9ucy5jb21wdXRlZCA9IHt9KVxuICAgIE9iamVjdC5rZXlzKGNzc01vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIG1vZHVsZSA9IGNzc01vZHVsZXNba2V5XVxuICAgICAgY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXNNb2R1bGU6IGVzTW9kdWxlLFxuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"container\"\n  }, [_c('div', {\n    staticClass: \"row\"\n  }, [_c('div', {\n    staticClass: \"col-md-8 col-md-offset-2\"\n  }, [_c('div', {\n    staticClass: \"panel panel-default\"\n  }, [_c('div', {\n    staticClass: \"panel-heading\"\n  }, [_vm._v(\"Example Component\")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"panel-body\"\n  }, [_vm._v(\"\\n                    I'm an example component!\\n                \")])])])])])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-3a6f2fea\", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9FeGFtcGxlLnZ1ZT8zMTNjIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfdm0uX20oMClcbn0sc3RhdGljUmVuZGVyRm5zOiBbZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImNvbnRhaW5lclwiXG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcInJvd1wiXG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcImNvbC1tZC04IGNvbC1tZC1vZmZzZXQtMlwiXG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcInBhbmVsIHBhbmVsLWRlZmF1bHRcIlxuICB9LCBbX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJwYW5lbC1oZWFkaW5nXCJcbiAgfSwgW192bS5fdihcIkV4YW1wbGUgQ29tcG9uZW50XCIpXSksIF92bS5fdihcIiBcIiksIF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwicGFuZWwtYm9keVwiXG4gIH0sIFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgICAgIEknbSBhbiBleGFtcGxlIGNvbXBvbmVudCFcXG4gICAgICAgICAgICAgICAgXCIpXSldKV0pXSldKVxufV19XG5tb2R1bGUuZXhwb3J0cy5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpLnJlcmVuZGVyKFwiZGF0YS12LTNhNmYyZmVhXCIsIG1vZHVsZS5leHBvcnRzKVxuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyLmpzP2lkPWRhdGEtdi0zYTZmMmZlYSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL0V4YW1wbGUudnVlXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

eval("\n/**\n * First we will load all of this project's JavaScript dependencies which\n * include Vue and Vue Resource. This gives a great starting point for\n * building robust, powerful web applications using Vue and Laravel.\n */\n\n\n__webpack_require__(0);\n\n/**\n * Next, we will create a fresh Vue application instance and attach it to\n * the page. Then, you may begin adding components to this application\n * or customize the JavaScript scaffolding to fit your unique needs.\n */\n\nVue.component('example', __webpack_require__(1));\n\nvar app = new Vue({\n    el: '#app'\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL2FwcC5qcz84YjY3Il0sInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBGaXJzdCB3ZSB3aWxsIGxvYWQgYWxsIG9mIHRoaXMgcHJvamVjdCdzIEphdmFTY3JpcHQgZGVwZW5kZW5jaWVzIHdoaWNoXG4gKiBpbmNsdWRlIFZ1ZSBhbmQgVnVlIFJlc291cmNlLiBUaGlzIGdpdmVzIGEgZ3JlYXQgc3RhcnRpbmcgcG9pbnQgZm9yXG4gKiBidWlsZGluZyByb2J1c3QsIHBvd2VyZnVsIHdlYiBhcHBsaWNhdGlvbnMgdXNpbmcgVnVlIGFuZCBMYXJhdmVsLlxuICovXG5cblxucmVxdWlyZSgnLi9ib290c3RyYXAnKTtcblxuLyoqXG4gKiBOZXh0LCB3ZSB3aWxsIGNyZWF0ZSBhIGZyZXNoIFZ1ZSBhcHBsaWNhdGlvbiBpbnN0YW5jZSBhbmQgYXR0YWNoIGl0IHRvXG4gKiB0aGUgcGFnZS4gVGhlbiwgeW91IG1heSBiZWdpbiBhZGRpbmcgY29tcG9uZW50cyB0byB0aGlzIGFwcGxpY2F0aW9uXG4gKiBvciBjdXN0b21pemUgdGhlIEphdmFTY3JpcHQgc2NhZmZvbGRpbmcgdG8gZml0IHlvdXIgdW5pcXVlIG5lZWRzLlxuICovXG5cblZ1ZS5jb21wb25lbnQoJ2V4YW1wbGUnLCByZXF1aXJlKCcuL2NvbXBvbmVudHMvRXhhbXBsZS52dWUnKSk7XG5cbmNvbnN0IGFwcCA9IG5ldyBWdWUoe1xuICAgIGVsOiAnI2FwcCdcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHJlc291cmNlcy9hc3NldHMvanMvYXBwLmpzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFRQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }
/******/ ]);